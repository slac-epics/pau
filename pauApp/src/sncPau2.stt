/*
 *    sncPau.stt
 *    Auth: KHKIM
 *
*/

program sncPau2
option +r;

%{
#define ADMIN_OFF         0
#define ADMIN_ON          1
#define ADMIN_UNAVAILABLE 2
#define FBCK_OFF          0
#define FBCK_ON           1
}%


int       index;

int       feedback_mode;
assign    feedback_mode  to "{MUX_NAME}:FBCK";
monitor   feedback_mode;

int       feedback_mode2;
assign    feedback_mode2  to "{MUX_NAME}:FBCK2";
monitor   feedback_mode2;


double    offset[4];
assign    offset         to { "{MUX_NAME}:OFFSET_0",
                              "{MUX_NAME}:OFFSET_1",
                              "{MUX_NAME}:OFFSET_2",
                              "{MUX_NAME}:OFFSET_3" };
double    fcom[4];
assign    fcom          to { "{MUX_NAME}:GETFCOM_0",
                             "{MUX_NAME}:GETFCOM_1",
                             "{MUX_NAME}:GETFCOM_2",
                             "{MUX_NAME}:GETFCOM_3" };
monitor   fcom;

evflag    ev_fcom_0;
evflag    ev_fcom_1;
evflag    ev_fcom_2;
evflag    ev_fcom_3;

sync      fcom[0]   ev_fcom_0;
sync      fcom[1]   ev_fcom_1;
sync      fcom[2]   ev_fcom_2;
sync      fcom[3]   ev_fcom_3;

/* 1st master */
double    master;
assign    master        to "{MUX_NAME}";

/* 2nd master */
double    master2;
assign    master2       to "{MUX_NAME}2";

int       admin;
assign    admin   to  "{ADMIN_NAME}";
monitor   admin;
evflag    ev_admin;
sync      admin    ev_admin;


int       admin2;
assign    admin2   to  "{ADMIN_NAME2}";
monitor   admin2;
evflag    ev_admin2;
sync      admin2    ev_admin2;


ss bwProp
{
    state calc_bwProp
    {
        when(feedback_mode && efTestAndClear(ev_fcom_0)) {   /* for 1st master */
            master = fcom[0];  /* make ds0 as a master data slot for the 1st master */
            offset[0] = fcom[0] - master;
            pvPut(offset[0]);
            pvPut(master);
        } state calc_bwProp

        when(feedback_mode2 && efTestAndClear(ev_fcom_1)) {   /* for 2nd master */
            master2 = fcom[1];  /* make ds1 as a master data slot for the 2nd master */
            offset[1] = fcom[1] - master2;
            pvPut(offset[1]);
            pvPut(master2);
        } state calc_bwProp


        when(feedback_mode2 && efTestAndClear(ev_fcom_2)) {   /* for 2nd master */
            master2 = fcom[1];  /* make ds1 as a master data slot for the 2nd master */
            offset[2] = fcom[2] - master2;
            pvPut(offset[2]);
            pvPut(master2);
        } state calc_bwProp

        when(feedback_mode && efTestAndClear(ev_fcom_3)) {   /* for 1st master */
            master = fcom[0];  /* make ds0 as a master data slot for the 1st master */
            offset[3] = fcom[3] - master;
            pvPut(offset[3]);
            pvPut(master);
        } state calc_bwProp
    }
    
}


ss iocAdmin
{
    state init
    {
       when(1) {
       } state check_mode
    }

    state check_mode
    {
        when(efTestAndClear(ev_admin)) {
            if(admin == ADMIN_OFF)         { feedback_mode = FBCK_OFF; pvPut(feedback_mode); }
            if(admin == ADMIN_ON)          { feedback_mode = FBCK_ON;  pvPut(feedback_mode); }
            if(admin == ADMIN_UNAVAILABLE) { feedback_mode = FBCK_OFF; pvPut(feedback_mode); }
        } state check_mode

        when(efTestAndClear(ev_admin2)) {
            if(admin2 == ADMIN_OFF)         { feedback_mode2 = FBCK_OFF; pvPut(feedback_mode2); }
            if(admin2 == ADMIN_ON)          { feedback_mode2 = FBCK_ON;  pvPut(feedback_mode2); }
            if(admin2 == ADMIN_UNAVAILABLE) { feedback_mode2 = FBCK_OFF; pvPut(feedback_mode2); }
        } state check_mode
    }

}
