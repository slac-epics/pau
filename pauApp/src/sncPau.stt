/*
 *    sncPau.stt
 *    Auth: KHKIM
 *
*/

program sncPau
option +r;

%{
#define ADMIN_OFF         0
#define ADMIN_ON          1
#define ADMIN_UNAVAILABLE 2
#define FBCK_OFF          0
#define FBCK_ON           1
}%


int       index;

int       feedback_mode;
assign    feedback_mode  to "{MUX_NAME}:FBCK";
monitor   feedback_mode;

double    offset[4];
assign    offset         to { "{MUX_NAME}:OFFSET_0",
                              "{MUX_NAME}:OFFSET_1",
                              "{MUX_NAME}:OFFSET_2",
                              "{MUX_NAME}:OFFSET_3" };
double    fcom[4];
assign    fcom          to { "{MUX_NAME}:GETFCOM_0",
                             "{MUX_NAME}:GETFCOM_1",
                             "{MUX_NAME}:GETFCOM_2",
                             "{MUX_NAME}:GETFCOM_3" };
monitor   fcom;
evflag    ev_fcom;
sync      fcom[0]   ev_fcom;

double    master;
assign    master        to "{MUX_NAME}";

int       admin;
assign    admin   to  "{ADMIN_NAME}";
monitor   admin;
evflag    ev_admin;
sync      admin    ev_admin;


ss bwProp
{
    state calc_bwProp
    {
        when(feedback_mode && efTestAndClear(ev_fcom)) {
            master = fcom[0];
            for(index = 0; index <4; index++) {
                offset[index] = fcom[index] - master;
                pvPut(offset[index]);
            }
            pvPut(master);
        } state calc_bwProp
    } 
}


ss iocAdmin
{
    state init
    {
        when(admin == ADMIN_UNAVAILABLE) {
            admin = ADMIN_OFF;
            pvPut(admin);
        } state check_mode
    }

    state check_mode
    {
        when(1) {
            if(admin == ADMIN_OFF)         { feedback_mode = FBCK_OFF; pvPut(feedback_mode); }
            if(admin == ADMIN_ON)          { feedback_mode = FBCK_ON;  pvPut(feedback_mode); }
            if(admin == ADMIN_UNAVAILABLE) { feedback_mode = FBCK_OFF; pvPut(feedback_mode); }
        } state wait_admin
    }

    state wait_admin
    {
        when(efTestAndClear(ev_admin)) {
        } state check_mode
    }
}
